[2025-07-07T03:11:20.123+0000] {taskinstance.py:1103} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: init_data_warehouse.create_fact_tables manual__2025-07-07T03:11:15.370329+00:00 [queued]>
[2025-07-07T03:11:20.130+0000] {taskinstance.py:1103} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: init_data_warehouse.create_fact_tables manual__2025-07-07T03:11:15.370329+00:00 [queued]>
[2025-07-07T03:11:20.130+0000] {taskinstance.py:1308} INFO - Starting attempt 1 of 2
[2025-07-07T03:11:20.139+0000] {taskinstance.py:1327} INFO - Executing <Task(PostgresOperator): create_fact_tables> on 2025-07-07 03:11:15.370329+00:00
[2025-07-07T03:11:20.142+0000] {standard_task_runner.py:57} INFO - Started process 300 to run task
[2025-07-07T03:11:20.143+0000] {standard_task_runner.py:84} INFO - Running: ['airflow', 'tasks', 'run', 'init_data_warehouse', 'create_fact_tables', 'manual__2025-07-07T03:11:15.370329+00:00', '--job-id', '114', '--raw', '--subdir', 'DAGS_FOLDER/init_dw.py', '--cfg-path', '/tmp/tmps_tyl1vp']
[2025-07-07T03:11:20.144+0000] {standard_task_runner.py:85} INFO - Job 114: Subtask create_fact_tables
[2025-07-07T03:11:20.186+0000] {task_command.py:410} INFO - Running <TaskInstance: init_data_warehouse.create_fact_tables manual__2025-07-07T03:11:15.370329+00:00 [running]> on host 1622b3ff66d0
[2025-07-07T03:11:20.274+0000] {taskinstance.py:1547} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='init_data_warehouse' AIRFLOW_CTX_TASK_ID='create_fact_tables' AIRFLOW_CTX_EXECUTION_DATE='2025-07-07T03:11:15.370329+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-07-07T03:11:15.370329+00:00'
[2025-07-07T03:11:20.276+0000] {sql.py:265} INFO - Executing: ['-- Fact table for Insurance Registration Process\nCREATE TABLE IF NOT EXISTS fact_registration (\n    registration_key SERIAL PRIMARY KEY,\n    customer_key INT NOT NULL,\n    product_key INT NOT NULL,\n    time_key INT NOT NULL, -- Registration date\n    policy_key INT NOT NULL,\n    premium_amount NUMERIC(12, 2),\n    sum_assured NUMERIC(15, 2),\n    policy_term INT, -- in years\n    referral_flag BOOLEAN,\n    batch_id VARCHAR(50),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (customer_key) REFERENCES dim_customer(customer_key),\n    FOREIGN KEY (product_key) REFERENCES dim_product(product_key),\n    FOREIGN KEY (time_key) REFERENCES dim_time(time_key),\n    FOREIGN KEY (policy_key) REFERENCES dim_policy(policy_key)\n);\n\n-- Index for faster queries\nCREATE INDEX IF NOT EXISTS idx_fact_reg_customer ON fact_registration(customer_key);\nCREATE INDEX IF NOT EXISTS idx_fact_reg_product ON fact_registration(product_key);\nCREATE INDEX IF NOT EXISTS idx_fact_reg_time ON fact_registration(time_key);\nCREATE INDEX IF NOT EXISTS idx_fact_reg_policy ON fact_registration(policy_key);', '-- Fact table for Insurance Claims\nCREATE TABLE IF NOT EXISTS fact_claim (\n    claim_key SERIAL PRIMARY KEY,\n    claim_id VARCHAR(20) NOT NULL,\n    policy_key INT NOT NULL,\n    customer_key INT NOT NULL,\n    time_key_submitted INT NOT NULL, -- Claim submission date\n    time_key_decision INT, -- Claim decision date\n    claim_type VARCHAR(100),\n    claim_amount NUMERIC(15, 2),\n    approved_amount NUMERIC(15, 2),\n    status VARCHAR(20),\n    processing_days INT, -- Days between submission and decision\n    rejection_flag BOOLEAN,\n    paid_flag BOOLEAN,\n    batch_id VARCHAR(50),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (policy_key) REFERENCES dim_policy(policy_key),\n    FOREIGN KEY (customer_key) REFERENCES dim_customer(customer_key),\n    FOREIGN KEY (time_key_submitted) REFERENCES dim_time(time_key),\n    FOREIGN KEY (time_key_decision) REFERENCES dim_time(time_key)\n);\n\n-- Index for faster queries\nCREATE INDEX IF NOT EXISTS idx_fact_claim_policy ON fact_claim(policy_key);\nCREATE INDEX IF NOT EXISTS idx_fact_claim_customer ON fact_claim(customer_key);\nCREATE INDEX IF NOT EXISTS idx_fact_claim_submit ON fact_claim(time_key_submitted);\nCREATE INDEX IF NOT EXISTS idx_fact_claim_decision ON fact_claim(time_key_decision);\nCREATE INDEX IF NOT EXISTS idx_fact_claim_status ON fact_claim(status);', '-- Fact table for Sales and Marketing Activities (Periodic Snapshot)\nCREATE TABLE IF NOT EXISTS fact_sales_activity (\n    activity_key SERIAL PRIMARY KEY,\n    activity_id VARCHAR(20) NOT NULL,\n    employee_key INT NOT NULL,\n    customer_key INT NOT NULL,\n    product_key INT NOT NULL,\n    program_key INT, -- Can be NULL if not related to a marketing program\n    time_key INT NOT NULL, -- Activity date\n    activity_type VARCHAR(50),\n    activity_channel VARCHAR(50),\n    duration_minutes INT,\n    status VARCHAR(20),\n    resulted_in_sale BOOLEAN,\n    follow_up_scheduled BOOLEAN,\n    batch_id VARCHAR(50),\n    snapshot_date DATE NOT NULL, -- Date when this snapshot was taken\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (employee_key) REFERENCES dim_employee(employee_key),\n    FOREIGN KEY (customer_key) REFERENCES dim_customer(customer_key),\n    FOREIGN KEY (product_key) REFERENCES dim_product(product_key),\n    FOREIGN KEY (program_key) REFERENCES dim_marketing_program(program_key),\n    FOREIGN KEY (time_key) REFERENCES dim_time(time_key)\n);\n\n-- Index for faster queries\nCREATE INDEX IF NOT EXISTS idx_fact_sales_emp ON fact_sales_activity(employee_key);\nCREATE INDEX IF NOT EXISTS idx_fact_sales_cust ON fact_sales_activity(customer_key);\nCREATE INDEX IF NOT EXISTS idx_fact_sales_prod ON fact_sales_activity(product_key);\nCREATE INDEX IF NOT EXISTS idx_fact_sales_prog ON fact_sales_activity(program_key);\nCREATE INDEX IF NOT EXISTS idx_fact_sales_time ON fact_sales_activity(time_key);\nCREATE INDEX IF NOT EXISTS idx_fact_sales_snapshot ON fact_sales_activity(snapshot_date);', '-- Fact table for Investment (Accumulating Snapshot)\nCREATE TABLE IF NOT EXISTS fact_investment (\n    investment_key SERIAL PRIMARY KEY,\n    investment_id VARCHAR(20) NOT NULL,\n    policy_key INT NOT NULL,\n    customer_key INT NOT NULL,\n    time_key_investment INT NOT NULL, -- Investment date\n    investment_type VARCHAR(50),\n    amount NUMERIC(15, 2),\n    return_percentage NUMERIC(5, 2),\n    days_since_investment INT,\n    investment_status VARCHAR(20),\n    batch_id VARCHAR(50),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (policy_key) REFERENCES dim_policy(policy_key),\n    FOREIGN KEY (customer_key) REFERENCES dim_customer(customer_key),\n    FOREIGN KEY (time_key_investment) REFERENCES dim_time(time_key)\n);\n\n-- Index for faster queries\nCREATE INDEX IF NOT EXISTS idx_fact_invest_policy ON fact_investment(policy_key);\nCREATE INDEX IF NOT EXISTS idx_fact_invest_customer ON fact_investment(customer_key);\nCREATE INDEX IF NOT EXISTS idx_fact_invest_time ON fact_investment(time_key_investment);\nCREATE INDEX IF NOT EXISTS idx_fact_invest_type ON fact_investment(investment_type);', '-- Fact table for Customer Service\nCREATE TABLE IF NOT EXISTS fact_customer_service (\n    service_key SERIAL PRIMARY KEY,\n    service_id VARCHAR(20) NOT NULL,\n    customer_key INT NOT NULL,\n    employee_key INT NOT NULL,\n    policy_key INT, -- Can be NULL if not related to a specific policy\n    time_key_interaction INT NOT NULL, -- Interaction date\n    time_key_resolution INT, -- Resolution date (can be NULL if not resolved)\n    interaction_type VARCHAR(50),\n    channel VARCHAR(50),\n    complaint_category VARCHAR(50),\n    duration_minutes INT,\n    status VARCHAR(20),\n    satisfaction_rating INT,\n    follow_up_required BOOLEAN,\n    resolution_time_hours INT, -- Time to resolution in hours\n    batch_id VARCHAR(50),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (customer_key) REFERENCES dim_customer(customer_key),\n    FOREIGN KEY (employee_key) REFERENCES dim_employee(employee_key),\n    FOREIGN KEY (policy_key) REFERENCES dim_policy(policy_key),\n    FOREIGN KEY (time_key_interaction) REFERENCES dim_time(time_key),\n    FOREIGN KEY (time_key_resolution) REFERENCES dim_time(time_key)\n);\n\n-- Index for faster queries\nCREATE INDEX IF NOT EXISTS idx_fact_cs_customer ON fact_customer_service(customer_key);\nCREATE INDEX IF NOT EXISTS idx_fact_cs_employee ON fact_customer_service(employee_key);\nCREATE INDEX IF NOT EXISTS idx_fact_cs_policy ON fact_customer_service(policy_key);\nCREATE INDEX IF NOT EXISTS idx_fact_cs_inter ON fact_customer_service(time_key_interaction);\nCREATE INDEX IF NOT EXISTS idx_fact_cs_resol ON fact_customer_service(time_key_resolution);\nCREATE INDEX IF NOT EXISTS idx_fact_cs_status ON fact_customer_service(status);\nCREATE INDEX IF NOT EXISTS idx_fact_cs_type ON fact_customer_service(interaction_type);']
[2025-07-07T03:11:20.293+0000] {base.py:73} INFO - Using connection ID '***_insurance_dw' for task execution.
[2025-07-07T03:11:20.326+0000] {base.py:73} INFO - Using connection ID '***_insurance_dw' for task execution.
[2025-07-07T03:11:20.331+0000] {sql.py:375} INFO - Running statement: -- Fact table for Insurance Registration Process
CREATE TABLE IF NOT EXISTS fact_registration (
    registration_key SERIAL PRIMARY KEY,
    customer_key INT NOT NULL,
    product_key INT NOT NULL,
    time_key INT NOT NULL, -- Registration date
    policy_key INT NOT NULL,
    premium_amount NUMERIC(12, 2),
    sum_assured NUMERIC(15, 2),
    policy_term INT, -- in years
    referral_flag BOOLEAN,
    batch_id VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_key) REFERENCES dim_customer(customer_key),
    FOREIGN KEY (product_key) REFERENCES dim_product(product_key),
    FOREIGN KEY (time_key) REFERENCES dim_time(time_key),
    FOREIGN KEY (policy_key) REFERENCES dim_policy(policy_key)
);

-- Index for faster queries
CREATE INDEX IF NOT EXISTS idx_fact_reg_customer ON fact_registration(customer_key);
CREATE INDEX IF NOT EXISTS idx_fact_reg_product ON fact_registration(product_key);
CREATE INDEX IF NOT EXISTS idx_fact_reg_time ON fact_registration(time_key);
CREATE INDEX IF NOT EXISTS idx_fact_reg_policy ON fact_registration(policy_key);, parameters: None
[2025-07-07T03:11:20.343+0000] {sql.py:375} INFO - Running statement: -- Fact table for Insurance Claims
CREATE TABLE IF NOT EXISTS fact_claim (
    claim_key SERIAL PRIMARY KEY,
    claim_id VARCHAR(20) NOT NULL,
    policy_key INT NOT NULL,
    customer_key INT NOT NULL,
    time_key_submitted INT NOT NULL, -- Claim submission date
    time_key_decision INT, -- Claim decision date
    claim_type VARCHAR(100),
    claim_amount NUMERIC(15, 2),
    approved_amount NUMERIC(15, 2),
    status VARCHAR(20),
    processing_days INT, -- Days between submission and decision
    rejection_flag BOOLEAN,
    paid_flag BOOLEAN,
    batch_id VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (policy_key) REFERENCES dim_policy(policy_key),
    FOREIGN KEY (customer_key) REFERENCES dim_customer(customer_key),
    FOREIGN KEY (time_key_submitted) REFERENCES dim_time(time_key),
    FOREIGN KEY (time_key_decision) REFERENCES dim_time(time_key)
);

-- Index for faster queries
CREATE INDEX IF NOT EXISTS idx_fact_claim_policy ON fact_claim(policy_key);
CREATE INDEX IF NOT EXISTS idx_fact_claim_customer ON fact_claim(customer_key);
CREATE INDEX IF NOT EXISTS idx_fact_claim_submit ON fact_claim(time_key_submitted);
CREATE INDEX IF NOT EXISTS idx_fact_claim_decision ON fact_claim(time_key_decision);
CREATE INDEX IF NOT EXISTS idx_fact_claim_status ON fact_claim(status);, parameters: None
[2025-07-07T03:11:20.362+0000] {sql.py:375} INFO - Running statement: -- Fact table for Sales and Marketing Activities (Periodic Snapshot)
CREATE TABLE IF NOT EXISTS fact_sales_activity (
    activity_key SERIAL PRIMARY KEY,
    activity_id VARCHAR(20) NOT NULL,
    employee_key INT NOT NULL,
    customer_key INT NOT NULL,
    product_key INT NOT NULL,
    program_key INT, -- Can be NULL if not related to a marketing program
    time_key INT NOT NULL, -- Activity date
    activity_type VARCHAR(50),
    activity_channel VARCHAR(50),
    duration_minutes INT,
    status VARCHAR(20),
    resulted_in_sale BOOLEAN,
    follow_up_scheduled BOOLEAN,
    batch_id VARCHAR(50),
    snapshot_date DATE NOT NULL, -- Date when this snapshot was taken
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (employee_key) REFERENCES dim_employee(employee_key),
    FOREIGN KEY (customer_key) REFERENCES dim_customer(customer_key),
    FOREIGN KEY (product_key) REFERENCES dim_product(product_key),
    FOREIGN KEY (program_key) REFERENCES dim_marketing_program(program_key),
    FOREIGN KEY (time_key) REFERENCES dim_time(time_key)
);

-- Index for faster queries
CREATE INDEX IF NOT EXISTS idx_fact_sales_emp ON fact_sales_activity(employee_key);
CREATE INDEX IF NOT EXISTS idx_fact_sales_cust ON fact_sales_activity(customer_key);
CREATE INDEX IF NOT EXISTS idx_fact_sales_prod ON fact_sales_activity(product_key);
CREATE INDEX IF NOT EXISTS idx_fact_sales_prog ON fact_sales_activity(program_key);
CREATE INDEX IF NOT EXISTS idx_fact_sales_time ON fact_sales_activity(time_key);
CREATE INDEX IF NOT EXISTS idx_fact_sales_snapshot ON fact_sales_activity(snapshot_date);, parameters: None
[2025-07-07T03:11:20.386+0000] {sql.py:375} INFO - Running statement: -- Fact table for Investment (Accumulating Snapshot)
CREATE TABLE IF NOT EXISTS fact_investment (
    investment_key SERIAL PRIMARY KEY,
    investment_id VARCHAR(20) NOT NULL,
    policy_key INT NOT NULL,
    customer_key INT NOT NULL,
    time_key_investment INT NOT NULL, -- Investment date
    investment_type VARCHAR(50),
    amount NUMERIC(15, 2),
    return_percentage NUMERIC(5, 2),
    days_since_investment INT,
    investment_status VARCHAR(20),
    batch_id VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (policy_key) REFERENCES dim_policy(policy_key),
    FOREIGN KEY (customer_key) REFERENCES dim_customer(customer_key),
    FOREIGN KEY (time_key_investment) REFERENCES dim_time(time_key)
);

-- Index for faster queries
CREATE INDEX IF NOT EXISTS idx_fact_invest_policy ON fact_investment(policy_key);
CREATE INDEX IF NOT EXISTS idx_fact_invest_customer ON fact_investment(customer_key);
CREATE INDEX IF NOT EXISTS idx_fact_invest_time ON fact_investment(time_key_investment);
CREATE INDEX IF NOT EXISTS idx_fact_invest_type ON fact_investment(investment_type);, parameters: None
[2025-07-07T03:11:20.398+0000] {sql.py:375} INFO - Running statement: -- Fact table for Customer Service
CREATE TABLE IF NOT EXISTS fact_customer_service (
    service_key SERIAL PRIMARY KEY,
    service_id VARCHAR(20) NOT NULL,
    customer_key INT NOT NULL,
    employee_key INT NOT NULL,
    policy_key INT, -- Can be NULL if not related to a specific policy
    time_key_interaction INT NOT NULL, -- Interaction date
    time_key_resolution INT, -- Resolution date (can be NULL if not resolved)
    interaction_type VARCHAR(50),
    channel VARCHAR(50),
    complaint_category VARCHAR(50),
    duration_minutes INT,
    status VARCHAR(20),
    satisfaction_rating INT,
    follow_up_required BOOLEAN,
    resolution_time_hours INT, -- Time to resolution in hours
    batch_id VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_key) REFERENCES dim_customer(customer_key),
    FOREIGN KEY (employee_key) REFERENCES dim_employee(employee_key),
    FOREIGN KEY (policy_key) REFERENCES dim_policy(policy_key),
    FOREIGN KEY (time_key_interaction) REFERENCES dim_time(time_key),
    FOREIGN KEY (time_key_resolution) REFERENCES dim_time(time_key)
);

-- Index for faster queries
CREATE INDEX IF NOT EXISTS idx_fact_cs_customer ON fact_customer_service(customer_key);
CREATE INDEX IF NOT EXISTS idx_fact_cs_employee ON fact_customer_service(employee_key);
CREATE INDEX IF NOT EXISTS idx_fact_cs_policy ON fact_customer_service(policy_key);
CREATE INDEX IF NOT EXISTS idx_fact_cs_inter ON fact_customer_service(time_key_interaction);
CREATE INDEX IF NOT EXISTS idx_fact_cs_resol ON fact_customer_service(time_key_resolution);
CREATE INDEX IF NOT EXISTS idx_fact_cs_status ON fact_customer_service(status);
CREATE INDEX IF NOT EXISTS idx_fact_cs_type ON fact_customer_service(interaction_type);, parameters: None
[2025-07-07T03:11:20.558+0000] {taskinstance.py:1350} INFO - Marking task as SUCCESS. dag_id=init_data_warehouse, task_id=create_fact_tables, execution_date=20250707T031115, start_date=20250707T031120, end_date=20250707T031120
[2025-07-07T03:11:20.575+0000] {local_task_job_runner.py:225} INFO - Task exited with return code 0
[2025-07-07T03:11:20.602+0000] {taskinstance.py:2653} INFO - 1 downstream tasks scheduled from follow-on schedule check
